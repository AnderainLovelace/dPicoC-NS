#include <os.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/////////////////////////////////////////////////////////////////////////////////
// UTILS
typedef int BOOL;
#define TRUE  1
#define FALSE 0

int SCR_BYTE_SIZE = get_scr_byte_size();
unsigned char * SCR_BASE_ADDRESS = (unsigned char*)get_scr_base_addr();

unsigned char * new_scrbuf ()
{
	unsigned char * scrbuf;
	scrbuf = malloc(SCR_BYTE_SIZE);
	memset(scrbuf,0xFF,SCR_BYTE_SIZE);
	return scrbuf;
}

void clrscrbuf(unsigned char * scrbuf)
{
	memset(scrbuf,0xFF,SCR_BYTE_SIZE);
}

void refresh_buf(unsigned char * scrbuf)
{
	memcpy(SCR_BASE_ADDRESS,scrbuf,SCR_BYTE_SIZE);
}
/////////////////////////////////////////////////////////////////////////////////
//CHINESE
#define FONT_16_SIZE 32
FILE * HZK = NULL;
unsigned char mat[FONT_16_SIZE];
int open_hzk ()
{
	HZK = fopen("/documents/dpicoc/HZK16.tns","rb");
	if (HZK==NULL) return FALSE;
	return TRUE;
}
void put_chs(unsigned char * scrbuf,int x,int y,unsigned char * str)
{
	unsigned char c1,c2;
	while(*str)
	{
		c1 = *str++;
		if(!(c1 & 0x80)) continue;
		c2 = *str++;
		fseek(HZK,(94*(c1-0xa1)+(c2-0xa1))*FONT_16_SIZE,SEEK_SET);
		fread(mat,FONT_16_SIZE,1,HZK);
		write_graph_buf(scrbuf,x,y,16,16,mat,0x0,0xF);
		x+=16;
	}
}

void pop_message (unsigned char * scrbuf,unsigned char * str)
{
	int top = 240 - 16*4;int c = 0,r = 0;
	unsigned char c1,c2;
	memset(scrbuf+top*160,0xFF,64*160);//clear
	while(*str)
	{
		c1 = *str++;
		if (c1=='\n') c = 20;
		else if(!(c1 & 0x80)) continue;
		else
		{
			c2 = *str++;
			fseek(HZK,(94*(c1-0xa1)+(c2-0xa1))*FONT_16_SIZE,SEEK_SET);
			fread(mat,FONT_16_SIZE,1,HZK);
			write_graph_buf(scrbuf,c*16,top+r*16,16,16,mat,0x0,0xF);
		}
		c++;
		if (c>=20)
		{
			c = 0;r++;
			if (r>=4)
			{
				refresh_buf(scrbuf);
				wait_key();
				memset(scrbuf+top*160,0xFF,64*160);//clear
				r = 0;
			}
		}
	}
	refresh_buf(scrbuf);
	wait_key();
}

void close_hzk ()
{
	if (HZK)fclose(HZK);
}
/////////////////////////////////////////////////////////////////////////////////
//MAP
int MAP_1_WIDTH = 20,MAP_1_HEIGHT = 10;

#define EN_MN_1	0

char MAP_1_DATA[200]=
{
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,
     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     0,     1,
     1,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     1,     1,     0,     0,     0,     0,     1,
     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,
     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     0,     1,
     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0,     1,     1,     1,     1,     1,     0,     1,     1,     1,
     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     0,     1,     1,
     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
};

typedef struct
{
	int x;
	int y;
	int dir;//0=down,1=left,2=rignt,3=up
	int left;
	int top;
}VIEWPORT;

VIEWPORT v;

#define VIEWPORT_WIDTH   10
#define VIEWPORT_HEIGHT  7

#define TILE_WIDTH 	32
#define TILE_HEIGHT	32

int check_tile(int x,int y)
{
	if (x<0 || y<0 || x>=map_width || y>=map_height) return FALSE;
	int d;
	d = map_data[map_width*y+x];
	if (d==1) return FALSE;
	return TRUE;
}

char * map_data = NULL;int map_width,map_height;

void load_map(int index)
{
	if (index==0)
	{
		map_data	= MAP_1_DATA;
		map_width	= MAP_1_WIDTH;
		map_height	= MAP_1_HEIGHT;
	}
}
/////////////////////////////////////////////////////////////////////////////////
//MAIN
int main()
{
	int		ch;
	BOOL	refresh = TRUE;
	// init viewport
	v.x = 1;v.y = 1;v.dir = 0;
	v.left = 0;v.top = 0;
	load_map(0);
	// init scr
	unsigned char * scrbuf = new_scrbuf();
	if (scrbuf==NULL) return 0;
	// init hzk
	if (!open_hzk()) return 0;
	// main game
	pop_message(scrbuf,"英勇的武士为了传说中的武器――魔剑，而来到了魔王的城堡……\n");
	while(TRUE)
	{
		if (refresh==TRUE)
		{
			// fix viewport
			v.left	= v.x - (VIEWPORT_WIDTH/2-1);
			v.top	= v.y - (VIEWPORT_HEIGHT/2-1);
			if (v.left < 0)								v.left = 0;
			if (v.left + VIEWPORT_WIDTH > map_width) 	v.left = map_width  - VIEWPORT_WIDTH;
			if (v.top < 0)								v.top = 0;
			if (v.top + VIEWPORT_HEIGHT > map_height)	v.top = map_height - VIEWPORT_HEIGHT;

			clrscrbuf(scrbuf);
			// refraw map
			int x,y,d;
			int rx,ry;
			for (y=v.top;y-v.top<VIEWPORT_HEIGHT && y<map_height;++y)
			{
				for (x=v.left;x-v.left<VIEWPORT_WIDTH && x<map_width;++x)
				{
					rx = (x-v.left)*TILE_WIDTH;
					ry = (y-v.top)*TILE_HEIGHT;
					d  = map_data[map_width*y+x];
					if (d==0) continue;
					write_graph_buf(scrbuf,rx,ry,TILE_WIDTH,TILE_HEIGHT,&GRAPH_TILES[128*(d-1)],0x0,0xF);
				}
			}
			// redraw character
			rx = (v.x-v.left)*TILE_WIDTH;
			ry = (v.y-v.top)*TILE_HEIGHT;
			write_graph_buf(scrbuf,rx,ry,TILE_WIDTH,TILE_HEIGHT,&GRAPH_CHARACTER[v.dir*128],0x0,0xF);
			refresh_buf(scrbuf);
			// debug
			char buf[64];
			sprintf(buf,"DEBUG-POS(%d,%d)-(%d,%d)",v.x,v.y,v.left,v.top);
			putstr(0,0,buf,0x0,0xF);
			refresh = FALSE;
		}
		ch = getch();
		if(ch=='8')			// up
		{
			if (check_tile(v.x,v.y-1))v.y--;
			v.dir = 3;
			refresh = TRUE;
		}
		else if(ch == '5')	// down
		{
			if (check_tile(v.x,v.y+1))v.y++;
			v.dir = 0;
			refresh = TRUE;
		}
		else if(ch=='4')		//left
		{
			if (check_tile(v.x-1,v.y)) v.x--;
			v.dir = 1;
			refresh = TRUE;
		}
		else if(ch=='6')		//right
		{
			if (check_tile(v.x+1,v.y)) v.x++;
			v.dir = 2;
			refresh = TRUE;
		}
		else if(ch=='x')	//exit
			break;
		sleep(100);
	}
	// clean up
	free(scrbuf);
	clrscr();
	puts("Game exit");
	return 0;
}
/////////////////////////////////////////////////////////////////////////////////
//GRAPHICS
unsigned char GRAPH_TILES[32*32/8]=
{0x0,0x0,0x0,0x0,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x0,0x0,0x0,0x0,
0xFF,0x7F,0xFF,0xFF,
0xFF,0x7F,0xFF,0xFF,
0xFF,0x7F,0xFF,0xFF,
0xFF,0x7F,0xFF,0xFF,
0xFF,0x7F,0xFF,0xFF,
0xFF,0x7F,0xFF,0xFF,
0xFF,0x7F,0xFF,0xFF,
0x0,0x0,0x0,0x0,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x7F,0xFF,0x7F,0xFF,
0x0,0x0,0x0,0x0,
0xFF,0x7F,0xFF,0x7F,
0xFF,0x7F,0xFF,0x7F,
0xFF,0x7F,0xFF,0x7F,
0xFF,0x7F,0xFF,0x7F,
0xFF,0x7F,0xFF,0x7F,
0xFF,0x7F,0xFF,0x7F,
0xFF,0x7F,0xFF,0x7F
};

unsigned char GRAPH_CHARACTER[512]=
{0x0,0xF,0xF8,0x0,
0x0,0x7A,0xDE,0x0,
0x7,0x89,0xCF,0x80,
0xD,0xE4,0xBF,0xC0,
0xD,0xF6,0x9F,0xC0,
0xF,0x7E,0x6F,0x60,
0x6,0x2F,0x7A,0xE0,
0x3,0xC3,0x61,0xE0,
0x3,0x3C,0x1E,0xE0,
0x3,0x83,0xE0,0xE0,
0x3,0x80,0x80,0xE0,
0x3,0xB8,0x8E,0xE0,
0x2,0x9C,0x1C,0xA0,
0x3,0x9E,0x3C,0xE0,
0x4,0xCD,0x59,0x90,
0xB,0x40,0x1,0x68,
0xE,0xA0,0x2,0xB8,
0x10,0x20,0x2,0x4,
0x20,0x58,0xD,0x2,
0x3F,0x5E,0x3D,0x7E,
0x1B,0xE3,0xE3,0xEC,
0x18,0xFF,0xFF,0x8C,
0x11,0x7C,0x1F,0x44,
0x35,0x7F,0xFF,0x56,
0x31,0xF8,0xF,0x46,
0x33,0xF2,0x1F,0xE6,
0x3F,0xF5,0x5F,0xFE,
0x3B,0xFF,0x3F,0xFE,
0x1E,0xBF,0xFF,0xBC,
0x15,0xFD,0xEF,0xD4,
0xE,0xFF,0xFF,0x78,
0x0,0x0,0x0,0x0,

0x0,0xF3,0xF8,0x0,
0x1F,0xEC,0x3E,0x0,
0x2B,0xD3,0xFF,0x0,
0x27,0xCF,0xAF,0x80,
0x19,0xFF,0xFF,0x80,
0xE,0xE0,0x63,0xC0,
0x2,0x1F,0x7C,0xC0,
0x1,0xC0,0xBF,0xC0,
0x2,0x0,0x27,0xC0,
0x2,0x0,0x3B,0xC0,
0x2,0x3F,0x3F,0xC0,
0x2,0x3C,0x7F,0xC0,
0x2,0x1C,0x6F,0xC0,
0x2,0x1,0x7F,0x80,
0x1,0x0,0x7F,0x80,
0x1,0x0,0x43,0x0,
0x1,0x0,0x9D,0x80,
0x1,0x3,0x43,0x40,
0x0,0xFE,0x82,0xC0,
0x0,0xF9,0x3F,0xC0,
0x1,0x3B,0x7F,0xC0,
0x1,0xFF,0xE3,0xE0,
0x0,0xCF,0xF1,0xE0,
0x0,0x7C,0x99,0xA0,
0x0,0x44,0x3,0xD0,
0x0,0x4B,0x1,0xD0,
0x0,0x45,0x21,0xE8,
0x0,0x9D,0xD3,0xE8,
0x1,0x3A,0xFF,0xF4,
0x1,0xFF,0xBF,0xE8,
0x0,0xFF,0xFF,0xF0,
0x0,0x0,0x0,0x0,

0x0,0x3,0xCF,0x0,
0x3,0xFC,0x77,0x80,
0x6,0xFF,0x9F,0xC0,
0x5,0xF1,0xF7,0xC0,
0xF,0xFF,0xBF,0xC0,
0x7,0xC6,0x7,0x40,
0x3,0x3E,0xFC,0x40,
0x3,0xFD,0x3,0x80,
0x3,0xE4,0x0,0x40,
0x3,0xDC,0x0,0xC0,
0x3,0xFC,0xFC,0x40,
0x3,0xFE,0x3C,0x40,
0x3,0xF6,0x38,0x40,
0x1,0xFE,0x80,0x40,
0x1,0xFE,0x0,0x80,
0x0,0xC2,0x0,0x80,
0x1,0xB9,0x0,0x80,
0x2,0xC2,0xC0,0x80,
0x3,0x41,0x7F,0x0,
0x3,0xFC,0x9F,0x0,
0x3,0xFE,0xDC,0x80,
0x7,0xC7,0xFE,0x80,
0x7,0x8F,0xF3,0x0,
0x5,0x99,0x3E,0x0,
0xB,0xC0,0x22,0x0,
0xB,0x80,0xD2,0x0,
0x17,0x84,0xA2,0x0,
0x17,0xCB,0xB9,0x0,
0x2F,0xFF,0x5C,0x80,
0x17,0xFD,0xFF,0x80,
0xF,0xFF,0xFF,0x0,
0x0,0x0,0x0,0x0,

0x0,0xF,0xFB,0x40,
0x0,0x79,0xCF,0xA0,
0x0,0x89,0xCF,0xA0,
0x1,0xE5,0x9B,0x20,
0x1,0xF6,0xB6,0x40,
0x3,0x3A,0xAC,0xE0,
0x3,0xDB,0xDB,0xE0,
0x2,0xDF,0xF7,0xA0,
0x2,0xEF,0xFF,0xA0,
0x3,0x77,0xFF,0x60,
0x3,0xBF,0xFE,0xE0,
0x3,0xFF,0xFF,0xE0,
0x3,0xFF,0xFF,0xE0,
0x3,0xFF,0xFF,0xE0,
0x0,0xFF,0xFF,0x80,
0x7,0x3F,0xFE,0x70,
0xD,0xDF,0xFD,0xD8,
0x10,0xEF,0xFF,0x84,
0x20,0x2F,0xF6,0x2,
0x34,0xF,0xF8,0x16,
0x1D,0xD,0xD8,0x5C,
0x1F,0xA5,0xD6,0xFC,
0x1F,0xB5,0xD6,0xFC,
0x33,0xD5,0xD5,0xE6,
0x33,0xF5,0xD7,0xE6,
0x23,0xF5,0xD7,0xE2,
0x27,0xF5,0xD7,0xF2,
0x27,0xFF,0xFF,0xF2,
0x37,0xFF,0xFF,0xF6,
0x1F,0xFF,0xFF,0xFC,
0x1,0xFF,0xFF,0x80,
0x0,0x0,0x0,0x0};